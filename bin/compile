#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # dont ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

mkdir -p $1 $2 $3 # Ensure dirs are present

build_dir=$(cd $1 && pwd)
cache_dir=$(cd $2 && pwd)
env_path=$(cd $3 && pwd)

# copied from HashNuke/HashNuke/heroku-buildpack-elixir
function export_env_vars() {
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_path" ]; then
    output_section "Will export the following config vars:"
    for e in $(ls $env_path); do
      echo "$e" | grep -E "$whitelist_regex" | grep -vE "$blacklist_regex" &&
      export "$e=$(cat $env_path/$e)"
      :
    done
  fi
}

function export_mix_env() {
  if [ -z "$MIX_ENV" ]; then
    if [ -d $env_path ] && [ -f $env_path/MIX_ENV ]; then
      export MIX_ENV=$(cat $env_path/MIX_ENV)
    else
      export MIX_ENV=${1:-prod}
    fi
  fi

  output_line "* MIX_ENV=${MIX_ENV}"
}

function output_line() {
  local spacing="      "
  echo "${spacing} $1"
}

function output_section() {
  local indentation="----->"
  echo "${indentation} $1"
}

export_env_vars
export_mix_env
# end copy

DEFAULT_RELEASE_OPTIONS="--env prod"
RELEASE_OPTIONS=${GIGALIXIR_RELEASE_OPTIONS:-$DEFAULT_RELEASE_OPTIONS}

cd $build_dir

if [ "$GIGALIXIR_SHOULD_HOT_UPGRADE" = "true" ]; then
  # well known dir.. would love to pass it in, but buildpack system doesn't do it for us.
  cp -r /tmp/in/_build .

  # TODO: duplicated below
  DIRS=(`ls -Ad _build/prod/rel/*/`)
  if [ ${#DIRS[@]} -ne 1 ]; then
    echo "Did not find exactly 1 directory under _build/prod/rel/."
    exit 1;
  fi
  APP=`echo $DIRS | cut -d '/' -f 4`
  DIRS=(`ls -Ad _build/prod/rel/$APP/releases/*/`)
  if [ ${#DIRS[@]} -ne 1 ]; then
    echo "Did not find exactly 1 directory under _build/prod/rel/$APP/releases/."
    exit 1;
  fi
  VERSION=`echo $DIRS | cut -d '/' -f 6`

  mix release $RELEASE_OPTIONS --upgrade --upfrom=$VERSION

  # remove current version so we know which is then new version to release.
  rm -rf _build/prod/rel/$APP/releases/$VERSION
else
  mix release $RELEASE_OPTIONS
fi
DIRS=(`ls -Ad _build/prod/rel/*/`)
if [ ${#DIRS[@]} -ne 1 ]; then
  echo "Did not find exactly 1 directory under _build/prod/rel/."
  exit 1;
fi
APP=`echo $DIRS | cut -d '/' -f 4`
DIRS=(`ls -Ad _build/prod/rel/$APP/releases/*/`)
if [ ${#DIRS[@]} -ne 1 ]; then
  echo "Did not find exactly 1 directory under _build/prod/rel/$APP/releases/."
  exit 1;
fi
VERSION=`echo $DIRS | cut -d '/' -f 6`

mkdir -p $cache_dir/out
rm -f $cache_dir/out/*
cp _build/prod/rel/$APP/releases/$VERSION/$APP.tar.gz $cache_dir/out/$APP-$VERSION.tar.gz

# so it can be deleted outside of container
chmod +w $cache_dir/out/$APP-$VERSION.tar.gz
