#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # dont ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

mkdir -p $1 $2 $3 # Ensure dirs are present

build_dir=$(cd $1 && pwd)
cache_dir=$(cd $2 && pwd)
env_path=$(cd $3 && pwd)
app_relative_path="." # default

# "return" value is basically just $app_relative_path. not returned, just set as env var.
function load_config() {
  output_section "Loading config..."

  local custom_config_file="${build_dir}/distillery_buildpack.config"

  if [ -f $custom_config_file ];
  then
    source $custom_config_file
  fi

  output_line "* app relative path $app_relative_path"
}

# copied from HashNuke/HashNuke/heroku-buildpack-elixir
function export_env_vars() {
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_path" ]; then
    output_section "Will export the following config vars:"
    for e in $(ls $env_path); do
      echo "$e" | grep -E "$whitelist_regex" | grep -vE "$blacklist_regex" &&
      export "$e=$(cat $env_path/$e)"
      :
    done
  fi
}

function export_mix_env() {
  if [ -z "$MIX_ENV" ]; then
    if [ -d $env_path ] && [ -f $env_path/MIX_ENV ]; then
      export MIX_ENV=$(cat $env_path/MIX_ENV)
    else
      export MIX_ENV=${1:-prod}
    fi
  fi

  output_line "* MIX_ENV=${MIX_ENV}"
}

function distillery_mix_release_command() {
  set +o errexit    # do not exit if there is an error
  mix help distillery.release >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "distillery.release"
  else
    echo "release"
  fi
  set -o errexit    # always exit on error
}

function output_line() {
  local spacing="      "
  echo "${spacing} $1"
}

function output_section() {
  local indentation="----->"
  echo "${indentation} $1"
}
# end copy

load_config
export_env_vars
export_mix_env

RELEASE_ENV=${MIX_ENV:-prod}
DEFAULT_RELEASE_OPTIONS="--env ${RELEASE_ENV}"
RELEASE_OPTIONS=${GIGALIXIR_RELEASE_OPTIONS:-$DEFAULT_RELEASE_OPTIONS}

cd $build_dir/$app_relative_path

if [ "$GIGALIXIR_SHOULD_HOT_UPGRADE" = "true" ]; then
  # well known dir.. would love to pass it in, but buildpack system doesn't do it for us.
  cp -r /tmp/in/_build .

  # TODO: duplicated below
  DIRS=(`ls -Ad _build/${RELEASE_ENV}/rel/*/`)
  if [ ${#DIRS[@]} -ne 1 ]; then
    echo "Did not find exactly 1 directory under _build/${RELEASE_ENV}/rel/."
    exit 1;
  fi
  APP=`echo $DIRS | cut -d '/' -f 4`
  DIRS=(`ls -Ad _build/${RELEASE_ENV}/rel/$APP/releases/*/`)
  if [ ${#DIRS[@]} -ne 1 ]; then
    echo "Did not find exactly 1 directory under _build/${RELEASE_ENV}/rel/$APP/releases/."
    exit 1;
  fi
  VERSION=`echo $DIRS | cut -d '/' -f 6`

  RELEASE_CMD=$(distillery_mix_release_command)
  mix $RELEASE_CMD $RELEASE_OPTIONS --upgrade --upfrom=$VERSION

  # remove current version so we know which is then new version to release.
  rm -rf _build/${RELEASE_ENV}/rel/$APP/releases/$VERSION
else
  RELEASE_CMD=$(distillery_mix_release_command)
  mix $RELEASE_CMD $RELEASE_OPTIONS
fi
DIRS=(`ls -Ad _build/${RELEASE_ENV}/rel/*/`)
if [ ${#DIRS[@]} -ne 1 ]; then
  echo "Did not find exactly 1 directory under _build/${RELEASE_ENV}/rel/."
  exit 1;
fi
APP=`echo $DIRS | cut -d '/' -f 4`
DIRS=(`ls -Ad _build/${RELEASE_ENV}/rel/$APP/releases/*/`)
if [ ${#DIRS[@]} -ne 1 ]; then
  echo "Did not find exactly 1 directory under _build/${RELEASE_ENV}/rel/$APP/releases/."
  exit 1;
fi
VERSION=`echo $DIRS | cut -d '/' -f 6`

mkdir -p $cache_dir/out
rm -f $cache_dir/out/*
cp _build/${RELEASE_ENV}/rel/$APP/releases/$VERSION/$APP.tar.gz $cache_dir/out/$APP-$VERSION.tar.gz

# so it can be deleted outside of container
chmod +w $cache_dir/out/$APP-$VERSION.tar.gz

# determine capabilities of this slug
# can eval run Elixir?
output_section "Determining release capabilities"
set +o errexit    # do not exit if there is an error

# this is a hack to get around an issue in distillery 2.0.13. in 2.0.13, if you run eval before running
# anything else, you get an error.
_build/${RELEASE_ENV}/rel/$APP/bin/$APP describe > /dev/null 2>&1

RESULT=$(_build/${RELEASE_ENV}/rel/$APP/bin/$APP eval 'IO.inspect 123+123' 2>&1)
if [ $? -eq 0 ]; then
  if [ $RESULT -eq '246' ]; then
    # success. write out capabilities file. # capabilities file is gigalixir-only, heroku ignores.
    output_line "eval supports elixir syntax"
    echo '{"distillery": {"eval": "elixir"}}' > $cache_dir/out/capabilities
    # so it can be deleted outside of container
    chmod +w $cache_dir/out/capabilities
  fi
fi
set -o errexit    # always exit on error


